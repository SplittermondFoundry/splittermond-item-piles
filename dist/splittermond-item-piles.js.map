{"version":3,"file":"splittermond-item-piles.js","sources":["../src/splittermond-item-piles.ts"],"sourcesContent":["declare const Hooks: any;\r\ndeclare const game: any;\r\n\r\ninterface Currency {\r\n    type: string;\r\n    name: string;\r\n    img: string;\r\n    abbreviation: string;\r\n    data: {\r\n        path: string;\r\n    }\r\n    primary: boolean;\r\n    exchangeRate: number;\r\n\r\n}\r\nHooks.once(\"item-piles-ready\", async () => {\r\n    const VERSIONS = {\r\n        \"13.2.2\": {\r\n\r\n            VERSION: \"1.0\",\r\n\r\n            // The actor class type is the type of actor that will be used for the default item pile actor that is created on first item drop.\r\n            ACTOR_CLASS_TYPE: \"character\",\r\n\r\n            ITEM_CLASS_LOOT_TYPE: \"\",\r\n\r\n            // The item class type is the type of item that will be used for the default weapon item\r\n            ITEM_CLASS_WEAPON_TYPE: \"weapon\",\r\n\r\n            // The item class type is the type of item that will be used for the default equipment item\r\n            \"ITEM_CLASS_EQUIPMENT_TYPE\": \"equipment\",\r\n\r\n            // The item quantity attribute is the path to the attribute on items that denote how many of that item that exists\r\n            \"ITEM_QUANTITY_ATTRIBUTE\": \"system.quantity\",\r\n\r\n            // Item filters actively remove items from the item pile inventory UI that users cannot loot, such as spells, feats, and classes\r\n            \"ITEM_FILTERS\": [\r\n                {\r\n                    path: \"type\",\r\n                    filters: [\"strength\", \"weakness\",\"mastery\", \"species\", \"culture\", \"ancestry\", \"education\", \"resource\", \"npcfeature\", \"moonsign\", \"language\", \"culturelore\", \"statuseffect\", \"spelleffect\", \"npcattack\", \"spell\"].join(\",\")\r\n                }\r\n            ],\r\n\r\n            // Item similarities determines how item piles detect similarities and differences in the system\r\n            \"ITEM_SIMILARITIES\": [\"name\", \"type\"],\r\n\r\n            \"UNSTACKABLE_ITEM_TYPES\": [],\r\n\r\n            // Currencies in item piles is a versatile system that can accept actor attributes (a number field on the actor's sheet) or items (actual items in their inventory)\r\n            // In the case of attributes, the path is relative to the \"actor.system\"\r\n            // In the case of items, it is recommended you export the item with `.toObject()` and strip out any module data\r\n            \"CURRENCIES\": [\r\n                {\r\n                    type: \"attribute\",\r\n                    name: \"Solare\",\r\n                    img: \"icons/commodities/currency/coin-embossed-crown-gold.webp\",\r\n                    abbreviation: \"{#}S\",\r\n                    data: {\r\n                        path: \"system.currency.S\"\r\n                    },\r\n                    primary: false,\r\n                    exchangeRate: 100\r\n                },\r\n                {\r\n                    type: \"attribute\",\r\n                    name: \"Lunare\",\r\n                    img: \"icons/commodities/currency/coin-engraved-moon-silver.webp\",\r\n                    abbreviation: \"{#}SP\",\r\n                    data: {\r\n                        path: \"system.currency.L\"\r\n                    },\r\n                    primary: true,\r\n                    exchangeRate: 1\r\n                },\r\n                {\r\n                    \"type\": \"attribute\",\r\n                    \"name\": \"Telare\",\r\n                    \"img\": \"icons/commodities/currency/coin-engraved-waves-copper.webp\",\r\n                    \"abbreviation\": \"{#}T\",\r\n                    \"data\": {\r\n                        \"path\": \"system.currency.T\"\r\n                    },\r\n                    \"primary\": false,\r\n                    \"exchangeRate\": 0.01\r\n                }\r\n            ],\r\n\r\n            // This function is an optional system handler that specifically transforms an item's price into a more unified numeric format\r\n            ITEM_COST_TRANSFORMER: (item:any , currencies:Currency[]) => {\r\n\r\n                const costString = item.system.price as string;\r\n                let totalCost = 0;\r\n                const cost = /^(?:(?<Solare>\\d+)[Ss])?\\s*(?:(?<Lunare>\\d+)[Ll])?\\s*(?:(?<Telare>\\d+)[Tt])?$/.exec(costString)?.groups;\r\n\r\n                totalCost = totalCost + parseInt(cost?.Solare ?? \"0\") * (currencies.find(c => c.name ===\"Solare\")?.exchangeRate ?? 0);\r\n                totalCost = totalCost + parseInt(cost?.Lunare ?? \"0\") * (currencies.find(c => c.name ===\"Lunare\")?.exchangeRate ?? 0);\r\n                totalCost = totalCost + parseInt(cost?.Telare ?? \"0\") * (currencies.find(c => c.name ===\"Telare\")?.exchangeRate ?? 0);\r\n                return totalCost;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Add configuration into item piles via the API\r\n    for (const [version, data] of Object.entries(VERSIONS)) {\r\n        await game.itempiles.API.addSystemIntegration(data, version);\r\n    }\r\n\r\n    // disabled trading\r\n    //await game.settings.set(\"item-piles\", \"enableTrading\", false);\r\n    //ui.players.render();\r\n});"],"names":["VERSIONS","item","currencies","costString","totalCost","cost","c","version","data"],"mappings":"AAeA,MAAM,KAAK,oBAAoB,YAAY;AACvC,QAAMA,IAAW;AAAA,IACb,UAAU;AAAA,MAEN,SAAS;AAAA;AAAA,MAGT,kBAAkB;AAAA,MAElB,sBAAsB;AAAA;AAAA,MAGtB,wBAAwB;AAAA;AAAA,MAGxB,2BAA6B;AAAA;AAAA,MAG7B,yBAA2B;AAAA;AAAA,MAG3B,cAAgB;AAAA,QACZ;AAAA,UACI,MAAM;AAAA,UACN,SAAS,CAAC,YAAY,YAAW,WAAW,WAAW,WAAW,YAAY,aAAa,YAAY,cAAc,YAAY,YAAY,eAAe,gBAAgB,eAAe,aAAa,OAAO,EAAE,KAAK,GAAG;AAAA,QAAA;AAAA,MAC7N;AAAA;AAAA,MAIJ,mBAAqB,CAAC,QAAQ,MAAM;AAAA,MAEpC,wBAA0B,CAAA;AAAA;AAAA;AAAA;AAAA,MAK1B,YAAc;AAAA,QACV;AAAA,UACI,MAAM;AAAA,UACN,MAAM;AAAA,UACN,KAAK;AAAA,UACL,cAAc;AAAA,UACd,MAAM;AAAA,YACF,MAAM;AAAA,UAAA;AAAA,UAEV,SAAS;AAAA,UACT,cAAc;AAAA,QAAA;AAAA,QAElB;AAAA,UACI,MAAM;AAAA,UACN,MAAM;AAAA,UACN,KAAK;AAAA,UACL,cAAc;AAAA,UACd,MAAM;AAAA,YACF,MAAM;AAAA,UAAA;AAAA,UAEV,SAAS;AAAA,UACT,cAAc;AAAA,QAAA;AAAA,QAElB;AAAA,UACI,MAAQ;AAAA,UACR,MAAQ;AAAA,UACR,KAAO;AAAA,UACP,cAAgB;AAAA,UAChB,MAAQ;AAAA,YACJ,MAAQ;AAAA,UAAA;AAAA,UAEZ,SAAW;AAAA,UACX,cAAgB;AAAA,QAAA;AAAA,MACpB;AAAA;AAAA,MAIJ,uBAAuB,CAACC,GAAWC,MAA0B;AAEzD,cAAMC,IAAaF,EAAK,OAAO;AAC/B,YAAIG,IAAY;AAChB,cAAMC,IAAO,gFAAgF,KAAKF,CAAU,GAAG;AAE/G,eAAAC,IAAYA,IAAY,SAASC,GAAM,UAAU,GAAG,KAAKH,EAAW,KAAK,CAAAI,MAAKA,EAAE,SAAQ,QAAQ,GAAG,gBAAgB,IACnHF,IAAYA,IAAY,SAASC,GAAM,UAAU,GAAG,KAAKH,EAAW,KAAK,CAAAI,MAAKA,EAAE,SAAQ,QAAQ,GAAG,gBAAgB,IACnHF,IAAYA,IAAY,SAASC,GAAM,UAAU,GAAG,KAAKH,EAAW,KAAK,CAAAI,MAAKA,EAAE,SAAQ,QAAQ,GAAG,gBAAgB,IAC5GF;AAAA,MACX;AAAA,IAAA;AAAA,EACJ;AAIJ,aAAW,CAACG,GAASC,CAAI,KAAK,OAAO,QAAQR,CAAQ;AACjD,UAAM,KAAK,UAAU,IAAI,qBAAqBQ,GAAMD,CAAO;AAMnE,CAAC;"}